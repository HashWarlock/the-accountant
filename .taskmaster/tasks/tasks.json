{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js Project with Dependencies",
        "description": "Set up Next.js 15+ project with App Router and install required dependencies with security patches",
        "status": "done",
        "dependencies": [
          "13"
        ],
        "priority": "high",
        "details": "Initialize Next.js 15.2.3+ project using create-next-app with App Router to avoid CVE-2025-29927 vulnerability. Install dependencies with pinned secure versions: @phala/dstack-sdk, prisma@6.11.1+, @prisma/client, @noble/curves@3.0.0, js-sha3@0.9.3 (instead of sha3), viem@2.0+, zod for validation, and dev dependencies including TypeScript, ESLint. Pin exact versions in package.json to ensure security compliance. Configure package.json scripts for build, dev, start, and database operations. Set up proper TypeScript configuration and Next.js configuration file (next.config.mjs) with proper security headers. CRITICAL: Use Next.js 15.2.3+ or 14.2.25+ minimum to avoid security vulnerability.",
        "testStrategy": "Verify project initializes correctly with secure Next.js version, all dependencies install without conflicts and security warnings, TypeScript compilation works, development server starts successfully, and security audit passes",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js project with secure version",
            "description": "Create Next.js project using version 15.2.3+ to avoid CVE-2025-29927",
            "status": "done",
            "dependencies": [],
            "details": "Run create-next-app with Next.js 15.2.3+ (or 14.2.25+ minimum) to avoid CVE-2025-29927 vulnerability. Use App Router, TypeScript, and Tailwind CSS. Verify the installed Next.js version meets security requirements before proceeding.",
            "testStrategy": "Verify Next.js version is 15.2.3+ or 14.2.25+ and project structure is correct"
          },
          {
            "id": 2,
            "title": "Install and pin secure dependency versions",
            "description": "Install all required dependencies with exact secure versions pinned in package.json",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "Install dependencies with exact pinned versions: @noble/curves@3.0.0, js-sha3@0.9.3, viem@^2.0.0, prisma@^6.11.1, @prisma/client@^6.11.1, @phala/dstack-sdk@latest, zod@latest. Use exact versions where specified for security. Verify no security vulnerabilities in dependency tree.",
            "testStrategy": "Run npm audit and verify all dependencies install without security warnings"
          },
          {
            "id": 3,
            "title": "Configure package.json scripts and project settings",
            "description": "Set up development, build, and database scripts with proper configuration",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "Configure package.json scripts for build, dev, start, and database operations (db:generate, db:migrate, db:studio). Set up proper TypeScript configuration with strict mode. Configure Next.js configuration file (next.config.mjs) with security headers including Content Security Policy, X-Frame-Options, and other security headers.",
            "testStrategy": "Verify all scripts run without errors and security headers are properly configured"
          },
          {
            "id": 4,
            "title": "Verify security compliance and dependency audit",
            "description": "Run security audits and verify all dependencies meet security requirements",
            "status": "done",
            "dependencies": [],
            "details": "Run npm audit to ensure no security vulnerabilities. Verify Next.js version is 15.2.3+ or 14.2.25+. Check that @noble/curves is 3.0.0, js-sha3 is 0.9.3, viem is 2.0+, and Prisma is 6.11.1+. Document security compliance in project README.",
            "testStrategy": "Security audit passes with no vulnerabilities and all version requirements are met"
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure Prisma Database Schema and Setup",
        "description": "Set up SQLite database with Prisma schema for user data storage",
        "details": "Create Prisma schema file defining User model with fields: id (String, cuid), email (String, unique), userId (String, unique), pubKeyHex (String), address (String), createdAt (DateTime). Configure SQLite as database provider in schema.prisma. Set up Prisma client generation and database migration scripts. Create initial migration for user table. Ensure database file is in .gitignore and set up proper database URL in environment variables.",
        "testStrategy": "Verify schema generates without errors, migrations run successfully, Prisma client can connect to database, and user model operations work correctly",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement User Signup API",
        "description": "Create POST /api/signup endpoint for user registration and wallet generation",
        "details": "Create app/api/signup/route.ts implementing POST handler. Validate request body with Zod schema for email and userId. Call dstack to get deterministic private key, derive public key and Ethereum address using crypto utilities. Store user data (id, email, userId, pubKeyHex, address, createdAt) in database via Prisma. Return user object with public data only. Implement duplicate email/userId validation and proper error responses. Add structured logging for signup events with metrics.",
        "testStrategy": "Integration tests for successful user creation, duplicate prevention, input validation, database persistence verification, and performance testing for 1s p95 requirement",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create API route structure and basic POST handler",
            "description": "Set up app/api/signup/route.ts with basic POST handler structure and Next.js API route configuration",
            "dependencies": [],
            "details": "Create the route.ts file in app/api/signup/ directory. Implement basic POST function with proper TypeScript typing. Set up proper Next.js 13+ app router API route structure. Add basic error handling wrapper and response formatting. Configure proper HTTP methods and CORS if needed.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement request validation with Zod schema",
            "description": "Create and implement Zod validation schema for email and userId request body parameters",
            "dependencies": [
              "5.1"
            ],
            "details": "Define Zod schema for signup request body with email (valid email format) and userId (string, required) validation. Implement request body parsing and validation with proper error responses for invalid input. Add sanitization for email field and userId format validation. Return structured validation errors with field-specific messages.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate dstack for deterministic key generation",
            "description": "Implement dstack integration to generate deterministic private keys and derive public keys and Ethereum addresses",
            "dependencies": [
              "5.2"
            ],
            "details": "Call dstack service to get deterministic private key for userId. Use crypto utilities to derive uncompressed public key (65 bytes) from private key. Generate Ethereum address from public key using keccak-256 hash. Handle dstack connectivity errors and implement retry logic. Ensure private key is immediately cleared from memory after use.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement database operations with Prisma",
            "description": "Set up Prisma database operations for user creation with duplicate prevention",
            "dependencies": [
              "5.3"
            ],
            "details": "Create user record in database with id, email, userId, pubKeyHex, address, and createdAt fields. Implement duplicate email and userId validation using Prisma unique constraints and proper error handling. Use database transactions for atomic user creation. Add proper error handling for database connection issues and constraint violations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement error handling and response formatting",
            "description": "Add comprehensive error handling, logging, and response formatting for all scenarios",
            "dependencies": [
              "5.4"
            ],
            "details": "Implement proper HTTP status codes for different error scenarios (400 for validation, 409 for duplicates, 500 for server errors). Add structured logging for signup events with metrics tracking. Format success response with user object containing only public data (no private keys). Implement proper error response structure with meaningful messages.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create comprehensive integration tests",
            "description": "Develop complete test suite for signup API covering all scenarios and performance requirements",
            "dependencies": [
              "5.5"
            ],
            "details": "Create integration tests for successful user creation, duplicate email/userId prevention, input validation scenarios, database persistence verification. Add performance tests to ensure 1s p95 response time requirement. Test error handling for dstack failures, database connectivity issues, and malformed requests. Include load testing for concurrent signup scenarios.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement User Keys API",
        "description": "Create GET /api/users/me/keys endpoint to retrieve user's wallet information",
        "details": "Create app/api/users/me/keys/route.ts implementing GET handler. Accept userId as query parameter, validate input with Zod. Query database for user by userId, return address and pubKeyHex fields. Implement proper error handling for user not found. Add request validation and structured logging. Consider implementing basic rate limiting to prevent enumeration attacks.",
        "testStrategy": "Unit tests for user lookup, error handling for non-existent users, input validation, and response format verification",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Message Signing API",
        "description": "Create POST /api/users/[userId]/sign endpoint for message signing",
        "details": "Create app/api/users/[userId]/sign/route.ts implementing POST handler. Validate userId parameter and message body with Zod. Re-derive private key via dstack for the userId, sign the message using crypto utilities. Return signature hex and optional signature_chain from dstack response. Implement proper error handling for missing users, signing failures, and dstack connectivity issues. Add structured logging and performance monitoring for 50ms p95 target. Ensure private key is immediately cleared from memory after use.",
        "testStrategy": "Integration tests for successful signing, performance benchmarks, user validation, memory safety verification, and error handling for various failure scenarios",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create API Route Structure",
            "description": "Set up the basic Next.js API route file and POST handler structure",
            "dependencies": [],
            "details": "Create app/api/users/[userId]/sign/route.ts with proper Next.js API route structure. Implement basic POST handler function with NextRequest/NextResponse types. Set up proper HTTP method handling and basic response structure.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Input Validation",
            "description": "Add Zod schema validation for userId parameter and message body",
            "dependencies": [
              "7.1"
            ],
            "details": "Create Zod schemas for validating userId parameter from URL and message body from request. Implement comprehensive input validation with proper error messages. Ensure userId format validation and message content validation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate dstack Key Retrieval",
            "description": "Implement private key re-derivation using dstack for the specified userId",
            "dependencies": [
              "7.2"
            ],
            "details": "Integrate with dstack service to re-derive private key for the given userId. Handle dstack connectivity and implement proper error handling for missing users or dstack failures. Ensure secure key retrieval process.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Message Signing",
            "description": "Add crypto utilities integration for message signing with private key",
            "dependencies": [
              "7.3"
            ],
            "details": "Use crypto utilities to sign the validated message with the retrieved private key. Generate signature hex and handle optional signature_chain from dstack response. Implement proper signing flow and error handling for signing failures.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Ensure Memory Safety",
            "description": "Implement secure private key handling and immediate memory cleanup",
            "dependencies": [
              "7.4"
            ],
            "details": "Ensure private keys are immediately cleared from memory after use. Implement secure memory handling practices, zero out sensitive data, and prevent key persistence in memory or logs. Add security measures for key lifecycle management.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add Performance Monitoring",
            "description": "Implement structured logging and performance optimization for 50ms p95 target",
            "dependencies": [
              "7.5"
            ],
            "details": "Add comprehensive structured logging for all operations. Implement performance monitoring to meet 50ms p95 target. Add timing metrics, error tracking, and performance optimization. Include proper error handling and logging for all failure scenarios.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Signature Verification API",
        "description": "Create POST /api/verify endpoint for signature verification",
        "details": "Create app/api/verify/route.ts implementing POST handler. Validate request body with Zod schema for pubKeyHex, message, and signature. Use crypto utilities to verify signature against public key and message hash. Return boolean result indicating signature validity. Implement comprehensive input validation, proper error handling, and structured logging. Add performance optimization for high-throughput verification scenarios.",
        "testStrategy": "Unit tests for valid signature verification, negative tests with tampered signatures/messages, input validation, and performance testing",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Admin Users API",
        "description": "Create GET /api/admin/users endpoint for admin dashboard user listing",
        "details": "Create app/api/admin/users/route.ts implementing GET handler. Query all users from database with pagination support, return array of user objects with all public fields (id, email, userId, pubKeyHex, address, createdAt). Implement pagination, sorting, and filtering capabilities. Add performance optimization for 10k users with 200ms p95 target. Include structured logging and basic security headers.",
        "testStrategy": "Performance tests with large datasets, pagination functionality, data integrity verification, and response time benchmarks",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Health Check API",
        "description": "Create GET /api/health endpoint for application health monitoring",
        "details": "Create app/api/health/route.ts implementing GET handler. Check database connectivity via Prisma, dstack socket availability, and overall application health. Return 200 OK with health status object including database status, dstack status, and timestamp. Implement timeout handling and graceful failure reporting. Add optional detailed health metrics when EXPOSE_INFO environment variable is set.",
        "testStrategy": "Health check reliability tests, database connection failure handling, dstack socket availability testing, and timeout behavior verification",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Build User Interface Components",
        "description": "Create React components for signup page, user dashboard, and admin dashboard",
        "details": "Create app/page.tsx for signup form with email and userId inputs, success display showing user wallet info. Create app/dashboard/page.tsx for user dashboard displaying userId, address, public key, message signing textarea with sign/verify functionality. Create app/admin/page.tsx for admin dashboard with user table showing all public user data. Implement proper form validation, loading states, error handling, and responsive design. Use Next.js App Router patterns and TypeScript. Add client-side API integration with proper error boundaries.",
        "testStrategy": "Component rendering tests, form validation, API integration testing, responsive design verification, and user interaction flows",
        "priority": "medium",
        "dependencies": [
          5,
          6,
          7,
          8,
          9
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Signup Form Component",
            "description": "Build the main signup page component with email and userId inputs",
            "dependencies": [],
            "details": "Create app/page.tsx with form inputs for email and userId, implement form submission handling, add success state displaying user wallet info, integrate with user creation API endpoint, add proper TypeScript types and Next.js App Router patterns",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create User Dashboard Component",
            "description": "Build user dashboard displaying wallet info and message signing functionality",
            "dependencies": [],
            "details": "Create app/dashboard/page.tsx showing userId, address, public key fields, add message signing textarea with sign/verify buttons, integrate with signing API endpoints, implement proper state management for signing operations",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Admin Dashboard Component",
            "description": "Build admin dashboard with user table displaying all public user data",
            "dependencies": [],
            "details": "Create app/admin/page.tsx with data table component showing all users, display public user information (userId, address, public key), implement table sorting and filtering, integrate with users list API endpoint",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Client-side API Integration Layer",
            "description": "Create API client utilities for frontend-backend communication",
            "dependencies": [],
            "details": "Create API client functions for user creation, key retrieval, message signing, and user listing. Implement proper error handling, loading states, and TypeScript types for API responses. Add request/response interceptors and retry logic",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Form Validation",
            "description": "Add comprehensive form validation across all components",
            "dependencies": [
              "11.1",
              "11.2"
            ],
            "details": "Implement Zod schemas for client-side validation, add real-time validation feedback, create reusable validation components, handle validation errors gracefully with user-friendly messages, ensure consistency with backend validation",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Error Handling and Loading States",
            "description": "Add comprehensive error boundaries and loading state management",
            "dependencies": [
              "11.1",
              "11.2",
              "11.3",
              "11.4"
            ],
            "details": "Create error boundary components, implement loading spinners and skeleton states, add toast notifications for success/error feedback, handle API errors with user-friendly messages, create fallback UI components",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Responsive Design",
            "description": "Ensure all components work properly across different screen sizes",
            "dependencies": [
              "11.1",
              "11.2",
              "11.3"
            ],
            "details": "Add responsive CSS/Tailwind classes, test components on mobile/tablet/desktop viewports, implement mobile-friendly form layouts, ensure admin table is scrollable on small screens, optimize touch interactions",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Create Component Testing Suite",
            "description": "Implement comprehensive tests for all UI components",
            "dependencies": [
              "11.1",
              "11.2",
              "11.3",
              "11.4",
              "11.5"
            ],
            "details": "Write unit tests for component rendering, test form validation flows, mock API integrations for testing, add accessibility tests, create user interaction tests with React Testing Library, ensure responsive design testing",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Create Deployment Configuration",
        "description": "Set up Docker, docker-compose, and CVM deployment artifacts",
        "details": "Create multi-stage Dockerfile for production builds with Node.js 20 Alpine base, optimized layer caching, security hardening, and health checks. Create docker-compose.yml with web service configuration, dstack socket volume mount (/var/run/dstack.sock), security options, resource limits, and health checks. Create app-compose.json for Phala CVM deployment with proper security attestation, socket mounting, capability dropping, and routing configuration. Add .dockerignore for build optimization. Include comprehensive README with local and CVM deployment instructions.",
        "testStrategy": "Docker build verification, container security scanning, health check functionality, socket mounting tests, and deployment documentation validation",
        "priority": "high",
        "dependencies": [
          1,
          10
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Multi-stage Dockerfile",
            "description": "Build production-optimized Dockerfile with Node.js 20 Alpine base",
            "dependencies": [],
            "details": "Create multi-stage Dockerfile with builder stage for dependencies and production stage. Use Node.js 20 Alpine base image, implement layer caching optimization, include security hardening measures (non-root user, minimal packages), and add health check configuration.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure docker-compose.yml",
            "description": "Set up Docker Compose configuration with service definitions",
            "dependencies": [
              "12.1"
            ],
            "details": "Create docker-compose.yml with web service configuration, dstack socket volume mount (/var/run/dstack.sock), security options, resource limits, and health checks. Include environment variable configuration and proper networking setup.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Phala CVM app-compose.json",
            "description": "Build CVM-specific deployment configuration",
            "dependencies": [
              "12.1"
            ],
            "details": "Create app-compose.json for Phala CVM deployment with security attestation, socket mounting configuration, capability dropping for security hardening, and proper routing configuration for CVM environment.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Security Hardening Measures",
            "description": "Apply security configurations across all deployment files",
            "dependencies": [
              "12.1",
              "12.2",
              "12.3"
            ],
            "details": "Implement security hardening including non-root user configuration, capability dropping, security context settings, read-only root filesystem where applicable, and proper secret management practices.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Configure Health Check Systems",
            "description": "Set up health check endpoints and monitoring",
            "dependencies": [
              "12.2",
              "12.3"
            ],
            "details": "Configure comprehensive health checks for Docker and CVM deployments, including application health endpoints, dependency checks, and proper timeout/retry configurations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create .dockerignore Optimization",
            "description": "Optimize Docker build context with .dockerignore",
            "dependencies": [
              "12.1"
            ],
            "details": "Create .dockerignore file to exclude unnecessary files from Docker build context, reducing build time and image size. Include node_modules, .git, logs, and development-only files.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Write Deployment Documentation",
            "description": "Create comprehensive deployment README and documentation",
            "dependencies": [
              "12.4",
              "12.5",
              "12.6"
            ],
            "details": "Create detailed deployment documentation including local Docker setup instructions, CVM deployment guide, environment variable configuration, troubleshooting guide, and security considerations.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "Set up Flox Development Environment",
        "description": "Install and configure Flox for reproducible development environment management",
        "details": "Install Flox package manager on the development machine using appropriate method (brew for macOS, apt/rpm for Linux). Initialize Flox environment in project root with 'flox init'. Create manifest.toml configuration with Node.js 20+, and required development tools. Configure environment variables and activation hooks for automatic dependency installation. This ensures all developers have identical, reproducible environments across different machines and operating systems.",
        "testStrategy": "Verify Flox is installed with 'flox --version', environment activates successfully with 'flox activate', Node.js and npm are available in the Flox environment, and manifest.toml is properly configured",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Install Flox package manager",
            "description": "Install Flox on the development system using the appropriate method",
            "details": "Install Flox using Homebrew on macOS with 'brew install flox' or download the appropriate package for Linux. Verify installation with 'flox --version'. Ensure Flox is available in PATH for all terminal sessions.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 13
          },
          {
            "id": 2,
            "title": "Initialize Flox environment",
            "description": "Create a new Flox environment in the project root directory",
            "details": "Run 'flox init' in the project root to create a new Flox environment. This will create a .flox directory and an initial manifest.toml file. Accept default prompts or specify project-specific settings as needed.",
            "status": "done",
            "dependencies": [
              "13.1"
            ],
            "parentTaskId": 13
          },
          {
            "id": 3,
            "title": "Configure manifest.toml for Node.js environment",
            "description": "Set up the Flox manifest with Node.js 20+ and required development tools",
            "details": "Edit manifest.toml to include: Node.js 20+ (nodejs_20), Git, and other development tools. Add configuration like: [install] nodejs_20.pkg-path = \"nodejs_20\" git.pkg-path = \"git\". Include any system dependencies needed for native Node modules.",
            "status": "done",
            "dependencies": [
              "13.2"
            ],
            "parentTaskId": 13
          },
          {
            "id": 4,
            "title": "Add environment hooks and variables",
            "description": "Configure activation hooks for automatic dependency installation and environment setup",
            "details": "Add [hook] section to manifest.toml with on-activate script to run 'npm install' when environment is activated. Configure any necessary environment variables in [vars] section. Example: [hook] on-activate = 'npm install'. This ensures dependencies are installed when developers enter the Flox environment.",
            "status": "done",
            "dependencies": [
              "13.3"
            ],
            "parentTaskId": 13
          },
          {
            "id": 5,
            "title": "Test and verify Flox environment",
            "description": "Activate the Flox environment and verify all tools are available and working",
            "details": "Run 'flox activate' to enter the environment. Verify Node.js is available with 'node --version' and should be 20+. Check npm with 'npm --version'. Test that the on-activate hook runs and installs dependencies. Exit and re-enter environment to ensure persistence. Document the activation command in README for other developers.",
            "status": "done",
            "dependencies": [
              "13.4"
            ],
            "parentTaskId": 13
          }
        ]
      },
      {
        "id": 14,
        "title": "Implement dstack SDK Integration",
        "description": "Create proper dstack client wrapper for TEE-based key management and signing",
        "details": "Create lib/dstack.ts wrapper that uses @phala/dstack-sdk for all cryptographic operations. The SDK provides complete key management internally:\n- Use client.getKey('wallet/ethereum', userId) to get deterministic wallet keys\n- The SDK returns complete key objects with signing capabilities built-in\n- All crypto operations happen inside the TEE\n- Connect via Unix socket at /var/run/dstack.sock\n- Implement proper error handling for TEE connection issues\n- Add fallback for local development without TEE",
        "testStrategy": "Integration tests with mock TEE, connection handling tests, key derivation consistency tests",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Test Docker Image Build",
        "description": "Verify the Docker image builds successfully and is production-ready",
        "details": "Build the Docker image using the multi-stage Dockerfile to ensure all stages complete successfully. Verify standalone Next.js output generation, dependency installation, Prisma client generation, non-root user setup, and health check configuration. Test image size optimization and layer caching.",
        "testStrategy": "Run docker build command, verify build completes without errors, check image size is under 500MB, test container startup, verify health endpoint responds correctly",
        "status": "done",
        "dependencies": [
          12
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Publish Docker Image to DockerHub",
        "description": "Build and push production Docker image to DockerHub registry",
        "details": "Build the Docker image for linux/amd64 platform with proper tagging. Login to DockerHub using docker login. Tag the image with DockerHub username and repository name. Push the image to DockerHub with version tags (latest and v1.0.0). Verify the image is publicly accessible on DockerHub.",
        "testStrategy": "Build image, push to DockerHub, verify image appears in registry, test pulling the image from DockerHub",
        "status": "done",
        "dependencies": [
          15
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Fix critical key derivation security issue",
        "description": "TEE key derivation was using the same path for all users, causing identical keys",
        "details": "The getKey function was using 'wallet/ethereum' as the path for all users, with userId as the second parameter. According to dstack SDK docs, only the first parameter (path) affects key derivation. Fixed by incorporating userId into the path: 'wallet/ethereum/{userId}'",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement remote attestation quote generation for key access",
        "description": "Add TEE remote attestation quotes whenever a key is accessed or generated",
        "details": "Implement functionality to generate a remote attestation quote from the TEE (dstack) every time a user's key is accessed. This includes key generation during signup and key retrieval during signing operations. The quote should include the public key/address in the application data field for cryptographic proof of key access within the TEE.",
        "testStrategy": "Test quote generation during signup, signing, and verification operations. Verify quotes contain correct application data. Test quote format and attestation chain validity.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Create audit log system for key access events",
        "description": "Design and implement database schema and API for storing attestation quotes as audit logs",
        "details": "Create a comprehensive audit logging system that stores remote attestation quotes for each key access event. This includes: database schema for audit logs (timestamp, userId, operation type, quote hex, attestation data), API endpoints to retrieve audit history, and integration with existing user operations.",
        "testStrategy": "Test database migrations, verify audit log creation on key operations, test query performance with large datasets, validate audit trail completeness",
        "status": "done",
        "dependencies": [
          18
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Add quote verification endpoint and UI",
        "description": "Create API endpoint and UI components to verify attestation quotes",
        "details": "Implement a verification system that allows users to validate attestation quotes. This includes: API endpoint to verify quote signatures and integrity, UI component to display quote details and verification status, integration with Intel/AMD attestation services for quote validation, and display of attestation report details.",
        "testStrategy": "Test quote verification with valid and invalid quotes, test UI display of attestation details, verify integration with attestation services, test error handling for malformed quotes",
        "status": "done",
        "dependencies": [
          18,
          19
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Add attestation quote to API responses",
        "description": "Include attestation quotes in signup, signing, and key retrieval API responses",
        "details": "Modify existing API endpoints to return attestation quotes alongside normal responses. This includes: Adding quote field to signup response with hex-encoded attestation, Including quote in signing operations response, Returning quote data in key retrieval endpoints, Ensuring backward compatibility with existing clients.",
        "testStrategy": "Test API response structure includes quote fields, verify quote format and encoding, test backward compatibility, validate quote data corresponds to the operation performed",
        "status": "done",
        "dependencies": [
          18
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Create audit log viewer UI component",
        "description": "Build UI component to display user's key access audit trail with attestation quotes",
        "details": "Develop a comprehensive audit log viewer that shows all key access events for a user. Features include: Chronological display of key access events with timestamps, Display of operation types (signup, sign, verify), Hex display of attestation quotes with copy functionality, Expandable details for each audit entry, Filtering and search capabilities, Export audit trail as JSON/CSV.",
        "testStrategy": "Test UI rendering with various audit log sizes, verify quote display and copy functionality, test filtering and search features, validate export formats",
        "status": "done",
        "dependencies": [
          19
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Refactor attestation data to include only public key for Intel TDX 64-byte limit compliance",
        "description": "Modify the attestation quote application data structure to only include the public key, removing other fields to comply with Intel TDX's 64-byte limit on application data.",
        "details": "The current `getWalletKeyWithAttestation` function in `/lib/dstack.ts:208-215` includes extensive application data (userId, address, publicKey, operation, timestamp, namespace) which may exceed Intel TDX's 64-byte limit. Refactor the `applicationData` object to contain only the public key (33 bytes for compressed secp256k1), leaving room for minimal additional data if needed. This change affects: 1) Update `applicationData` structure in `getWalletKeyWithAttestation` to only include publicKey, 2) Update any dependent code that expects the full application data structure in audit logging or verification, 3) Ensure backward compatibility by updating the audit log system to still capture full context but only send minimal data to TEE, 4) Update tests and documentation to reflect the simplified attestation data structure, 5) Consider adding a separate metadata field for audit purposes that doesn't go into the TEE attestation.",
        "testStrategy": "Test attestation quote generation with new minimal application data structure, verify quote size stays within 64-byte limit, test backward compatibility with existing audit log viewing functionality, validate that public key verification still works correctly, test integration with Intel TDX attestation service if available, ensure audit logs still capture necessary information for compliance.",
        "status": "done",
        "dependencies": [
          18,
          21
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Fix critical quote handling bug in dstack.ts where quote is incorrectly converted from hex string to bytes",
        "description": "The dstack SDK's getQuote() method returns a quote property as a Hex string type, but the code incorrectly treats it as bytes and applies Buffer.from() conversion on line 220.",
        "details": "The bug is in the `getWalletKeyWithAttestation` function at line 220 in `/lib/dstack.ts`. The code currently does `Buffer.from(quoteResponse.quote).toString('hex')` which assumes `quoteResponse.quote` is a Uint8Array or Buffer, but according to the SDK documentation, `getQuote()` returns a quote property that is already a Hex string type. This double conversion is corrupting the quote data. The fix involves removing the `Buffer.from()` wrapper and directly using `quoteResponse.quote` since it's already in hex format. The same issue exists on line 222 for the event_log field. Update both lines to handle the hex string correctly: `const quoteHex = quoteResponse.quote` and `const eventLogHex = quoteResponse.event_log || undefined`. Also update the console logging to reflect that the quote is already a hex string.",
        "testStrategy": "Test quote generation with real TEE environment to verify quote format matches expected attestation structure, compare quote output before and after fix to ensure no data corruption, verify that audit log storage and retrieval works correctly with the fixed quote format, test attestation quote verification endpoints to ensure quotes are properly formatted for validation services, add unit tests that mock the SDK response to verify proper handling of hex string quotes.",
        "status": "done",
        "dependencies": [
          18,
          21,
          23
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Create Phala Cloud integration module for uploading attestation quotes to Phala Cloud API",
        "description": "Implement uploadQuoteToPhalaCloud() and getPhalaVerificationStatus() functions with API authentication for storing and verifying attestation quotes via Phala Cloud services.",
        "details": "Create lib/phala-cloud.ts module implementing integration with Phala Cloud API. The module should include: 1) uploadQuoteToPhalaCloud(quote: string, metadata: object) function that uploads attestation quotes to Phala Cloud storage/verification service, 2) getPhalaVerificationStatus(quoteId: string) function to check verification status of uploaded quotes, 3) API authentication handling using API keys or token-based auth as required by Phala Cloud, 4) Error handling for network failures, authentication errors, and quota limits, 5) TypeScript interfaces for request/response structures, 6) Integration with existing attestation system in lib/dstack.ts:220 where quotes are generated, 7) Configuration via environment variables (PHALA_CLOUD_API_KEY, PHALA_CLOUD_ENDPOINT), 8) Retry logic with exponential backoff for failed uploads, 9) Quote validation before upload to ensure proper format, 10) Logging integration consistent with existing dstack logging patterns. Update existing quote generation flows in getWalletKeyWithAttestation() to optionally upload quotes to Phala Cloud for external verification. Add new API endpoint POST /api/attestation/upload for manual quote uploads if needed.",
        "testStrategy": "Unit tests for uploadQuoteToPhalaCloud() with mock API responses, integration tests with Phala Cloud sandbox/staging environment, error handling tests for network failures and invalid authentication, quote format validation tests, configuration validation tests for missing/invalid API keys, end-to-end tests uploading real quotes from dstack and verifying upload success, performance tests for upload timeouts and retry behavior",
        "status": "done",
        "dependencies": [
          14,
          18,
          21,
          23,
          "24"
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Implement t16z explorer integration for attestation verification",
        "description": "Create uploadQuoteToT16z() function to submit quotes to t16z.com and generate public verification URLs for attestation verification via the TEE Attestation Explorer.",
        "details": "Create lib/t16z-explorer.ts module implementing integration with t16z.com's TEE Attestation Explorer for public attestation verification. The module should include: 1) uploadQuoteToT16z(quote: string, metadata?: object) function that uploads attestation quotes to proof.t16z.com verification service, 2) generateVerificationUrl(quote: string) function to create public verification URLs for attestation reports, 3) Error handling for network failures and invalid quotes, 4) TypeScript interfaces for request/response structures, 5) Integration with existing attestation system in lib/dstack.ts:220 where quotes are generated, 6) Configuration via environment variables (T16Z_API_ENDPOINT), 7) Retry logic with exponential backoff for failed uploads, 8) Quote validation before upload to ensure proper Intel TDX format, 9) Logging integration consistent with existing dstack logging patterns, 10) Support for both automatic upload during key operations and manual verification URL generation. Update existing quote generation flows in getWalletKeyWithAttestation() to optionally upload quotes to t16z for public verification. Add new API endpoint POST /api/attestation/verify-t16z for manual quote verification.",
        "testStrategy": "Unit tests for uploadQuoteToT16z() with mock API responses, integration tests with t16z.com staging environment, error handling tests for network failures and invalid quotes, quote format validation tests for Intel TDX compliance, configuration validation tests for missing/invalid API endpoints, end-to-end tests uploading real quotes from dstack and verifying public URLs work correctly, performance tests for upload timeouts and retry behavior, verification of generated URLs redirect to correct t16z explorer pages",
        "status": "done",
        "dependencies": [
          14,
          18,
          21,
          23,
          24
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "UI Upgrade with Phala Network Brand Colors",
        "description": "Implement Phala Network's official color palette throughout the application using CSS variables and update all shadcn/ui components",
        "details": "Upgrade The Accountant application's user interface to align with Phala Network's brand identity. This involves implementing a comprehensive theming system with CSS variables using the Phala color palette (Phala Lime #CDFA50 as primary, Phala Green scale from #FCFDFA to #36411D), updating all shadcn/ui components, and ensuring a cohesive, modern design throughout the application. The implementation includes creating theme.css with semantic color mappings, updating Tailwind configuration, modifying all UI components to use the new color scheme, and ensuring excellent readability and contrast ratios.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          26
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Fix Docker build cache and rebuild with Phala theme",
        "description": "Clean up Docker build cache and rebuild v1.5.0 image to ensure the new Phala Network theme is properly included. Current build seems to be using cached old UI.",
        "details": "The Docker build appears to be using cached layers from previous builds, causing the old UI to persist. Need to: 1) Clean Docker build cache with --no-cache flag, 2) Verify all theme files are properly included in the build context, 3) Rebuild the image for linux/amd64 platform, 4) Test locally to confirm new theme is applied, 5) Push updated image to DockerHub",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          27
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Polish UI design and clean up project files",
        "description": "Enhance the UI with more professional design elements and remove unnecessary files added during development",
        "details": "The current UI needs refinement to look more professional. Tasks include: 1) Enhance typography with better font hierarchy and spacing, 2) Add subtle animations and micro-interactions, 3) Improve card designs with better shadows and borders, 4) Add loading states and skeleton screens, 5) Polish button hover effects and transitions, 6) Clean up unnecessary markdown files like RELEASE notes and deployment guides that shouldn't be in the repo, 7) Remove any test files or temporary development artifacts, 8) Ensure consistent spacing and alignment throughout",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          28
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Redesign Secure Wallet UI for Modern Look",
        "description": "Update the Secure Wallet Infrastructure interface to have a more modern and sleek appearance",
        "details": "The current UI has rigid, boxy elements that need modernization:\n1. Navigation tabs - Replace rigid boxes with fluid, modern tab design\n2. Form inputs - Add proper styling, shadows, focus states, and transitions\n3. Button design - Improve the Sign Message button with modern styling\n4. Layout improvements - Add better spacing, reduce rigidity, implement card-based design\n5. Color scheme - Replace lime green background with sophisticated color palette\n6. Typography - Improve font choices, sizes, and text hierarchy\n7. Add subtle animations and transitions for better UX",
        "testStrategy": "Visual testing to ensure UI updates render correctly across different screen sizes and browsers",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Clean up unnecessary project files",
        "description": "Remove unused files and assets to keep the project organized",
        "details": "Clean up the following:\n1. Remove unused images in attached_assets folder that are no longer needed\n2. Review and remove any unused SVG files in public folder (file.svg, globe.svg, window.svg, vercel.svg if not used)\n3. Clean up any test or temporary files\n4. Ensure all remaining assets are properly used in the application\n5. Update .gitignore to exclude unnecessary files",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          30
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 32,
        "title": "Research shadcnblock components and templates",
        "description": "Study shadcnblock documentation, available blocks, templates and best practices to plan UI refactoring strategy",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          30
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Install shadcnblock dependencies and setup",
        "description": "Install shadcnblock packages, configure build tools, and integrate with existing shadcn/ui setup",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          32
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Refactor hero section using shadcnblock hero components",
        "description": "Replace custom hero section with shadcnblock hero block maintaining Phala branding and TEE messaging",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 35,
        "title": "Replace tab navigation with shadcnblock navigation components",
        "description": "Implement shadcnblock navigation blocks for the main tab interface with improved UX and accessibility",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Refactor forms using shadcnblock form blocks",
        "description": "Replace SignupForm, SignMessage, and VerifySignature forms with shadcnblock form components and validation patterns",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Implement shadcnblock card layouts for data display",
        "description": "Replace custom card components with shadcnblock card blocks for user data, wallet info, and audit logs display",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Upgrade user list table with shadcnblock data tables",
        "description": "Implement shadcnblock data table blocks with sorting, filtering, and pagination for UserList component",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 39,
        "title": "Implement shadcnblock loading and skeleton states",
        "description": "Add shadcnblock skeleton loaders and loading animations for better UX during async operations",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 40,
        "title": "Refactor footer using shadcnblock footer blocks",
        "description": "Replace custom footer with shadcnblock footer components maintaining partner logos and links",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "low",
        "subtasks": []
      },
      {
        "id": 41,
        "title": "Add shadcnblock notification system",
        "description": "Replace current toast notifications with shadcnblock notification blocks for consistent alert patterns",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 42,
        "title": "Implement responsive layout with shadcnblock grid system",
        "description": "Apply shadcnblock responsive grid and layout patterns across all pages for better mobile experience",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 43,
        "title": "Maintain Phala brand theme with shadcnblock components",
        "description": "Ensure all shadcnblock components properly integrate with existing Phala color system and brand guidelines",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          33
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 44,
        "title": "Test shadcnblock UI refactoring",
        "description": "Comprehensive testing of all refactored components for functionality, accessibility, and performance",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          42,
          43
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 45,
        "title": "Build and deploy shadcnblock refactored version",
        "description": "Create production build with shadcnblock UI and deploy to Docker registry with updated version tag",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          44,
          31
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-09T04:45:44.364Z",
      "updated": "2025-09-23T19:35:52.944Z",
      "description": "Tasks for master context"
    }
  }
}